<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Disaster Area</title><link href="http://paxswill.com/" rel="alternate"></link><link href="http://paxswill.com/atom.xml" rel="self"></link><id>http://paxswill.com/</id><updated>2013-11-04T00:00:00-05:00</updated><entry><title>Using an Encrypted Root Partition withÂ Raspbian</title><link href="http://paxswill.com/blog/2013/11/04/encrypted-raspberry-pi/" rel="alternate"></link><updated>2013-11-04T00:00:00-05:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2013-11-04:blog/2013/11/04/encrypted-raspberry-pi/</id><summary type="html">&lt;p&gt;I recently had to figure out how to encrypt the root partition of a Raspberry
Pi running Raspbian. I found some mentions of people doing it here and there,
but no end-to-end walkthrough of how to do it. These instructions are for
Raspbian &amp;#8216;wheezy&amp;#8217; and assume a newly imaged &lt;span class="caps"&gt;SD&lt;/span&gt; card from the distributed
Raspbian image. I also used another computer running Linux with an &lt;span class="caps"&gt;SD&lt;/span&gt; card
reader to perform the actual initial encryption. There may be a way of doing
this all form a single Pi, but I didn&amp;#8217;t look to closely into&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;Setup on the&amp;nbsp;Pi&lt;/h2&gt;
&lt;p&gt;First we make sure we&amp;#8217;re using the latest software and then reboot to make sure
everything is there. After that you should expand the root partition by running
&lt;code&gt;sudo raspi-config&lt;/code&gt; and following the&amp;nbsp;prompts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we&amp;#8217;ll upgrade the firmware and kernel. Right now (early November 2013) we
need to use the &amp;#8216;next&amp;#8217; branch as that kernel has &lt;code&gt;CONFIG_BLK_DEV_INITRD&lt;/code&gt;
enabled. That option allows us to use an initial &lt;span class="caps"&gt;RAM&lt;/span&gt; filesystems (referred to
as an initramfs afterwards). This can take a while, and &lt;em&gt;will&lt;/em&gt; fill up your
root partition if you haven&amp;#8217;t expanded it yet. Afterwards reboot to have the
new firmware and kernel take&amp;nbsp;effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;&lt;span class="caps"&gt;BRANCH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;rpi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we install the necessary packages. Busybox is a collection of common shell
utilities and a shell that uses a very small memory footprint and will be our
shell in the initramfs. cryptsetup installs the necessary utilities to encrypt
and unlock encrypted&amp;nbsp;partitions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;cryptsetup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we create the initramfs. On normal desktop distributions of Linux, this
step is usually run automatically whenever the kernel is update, but we have to
do it&amp;nbsp;manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkinitramfs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to modify /boot/config.txt to have the bootloader load our new
initramfs into memory. Add these lines at the end of the&amp;nbsp;file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt; &lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt; &lt;span class="n"&gt;followkernel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Encrypting the Root&amp;nbsp;Partition.&lt;/h2&gt;
&lt;p&gt;On another computer running Linux, mount the &lt;span class="caps"&gt;SD&lt;/span&gt; card. I&amp;#8217;m using a Dell Mini 9,
and coincidentally the &lt;span class="caps"&gt;SD&lt;/span&gt; card reader uses &lt;code&gt;/dev/mmcblk0&lt;/code&gt; like the Pi does.
Your device name may vary, checking dmesg with &lt;code&gt;dmesg | tail&lt;/code&gt; may be useful to
learn what name your system uses for &lt;span class="caps"&gt;SD&lt;/span&gt; cards. Now create an image of the root
partition on the &lt;span class="caps"&gt;SD&lt;/span&gt; card (partition 2). Make sure the file system is alright,
then shrink it down to its minimum size. We&amp;#8217;ll use this later to restore the
existing system to the new, encrypted&amp;nbsp;partition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p2&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;raspbian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="n"&gt;e2fsck&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;raspbian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
&lt;span class="n"&gt;resize2fs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;raspbian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If your non-Pi Linux computer doesn&amp;#8217;t already have them installed, install the
cryptsetup&amp;nbsp;command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cryptsetup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we&amp;#8217;re going to create the encrypted partition. You should explicitly
specify the key size and cipher as the default changed in version 1.6.0 os
cryptsetup and Raspbian has an older version that doesn&amp;#8217;t support the new
cipher. The luksOpen command creates &lt;code&gt;/dev/mapper/sdcard&lt;/code&gt;, which is the
decrypted interface to the encrypted&amp;nbsp;partition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cryptsetup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="n"&gt;aes&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cbc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essiv&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="n"&gt;luksFormat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p2&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cryptsetup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;luksOpen&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p2&lt;/span&gt; &lt;span class="n"&gt;sdcard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy the original filesystem data back to the newly created encrypted
partition. This can sometimes take a while; it took just under ten minutes to
copy 3.&lt;span class="caps"&gt;5GB&lt;/span&gt; with my setup. After that we&amp;#8217;ll re-expand the filesystem to take up
the whole&amp;nbsp;partition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;raspbian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;e2fsck&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;resize2fs&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to configure the system on the &lt;span class="caps"&gt;SD&lt;/span&gt; card to use the new partition
as its root. Change the &lt;code&gt;root=/dev/mmcblk0p2&lt;/code&gt; part to
&lt;code&gt;root=/dev/mapper/sdcard&lt;/code&gt; and add &lt;code&gt;cryptdevice=/dev/mmcblk0p2:sdcard&lt;/code&gt;. We also
need to change /etc/fstab on to use the new encrypted partition. The commands
below will show you how to make the boot and main partition available. In the
fstab file, change &lt;code&gt;/dev/mmcblk0p2&lt;/code&gt; to &lt;code&gt;/dev/mapper/sdcard&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last steps are to tell the Pi how to boot the new partition. First mount
the boot partition and the new partition somewhere so we can access them&amp;nbsp;easily.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi_root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi_boot&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi_boot&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi_root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now edit the cmdline.txt file on the Pi&amp;#8217;s boot partition
(&lt;code&gt;/tmp/pi_boot/cmdline.txt&lt;/code&gt; is you used the above commands) to tell the kernel
what the new root partition is and how to access it. Change
&lt;code&gt;root=/dev/mmcblk0p2&lt;/code&gt; to &lt;code&gt;root=/dev/mapper/sdcard&lt;/code&gt; and add
&lt;code&gt;cryptdevice=/dev/mmcblk0p2:sdcard&lt;/code&gt;. Here&amp;#8217;s what mine looks like after those
changes. Yours might be a little different, but it should look&amp;nbsp;similar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dwc_otg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lpm_enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ttyAMA0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt; &lt;span class="n"&gt;kgdboc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ttyAMA0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tty1&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt; &lt;span class="n"&gt;cryptdevice&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt; &lt;span class="n"&gt;rootfstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ext4&lt;/span&gt; &lt;span class="n"&gt;elevator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="n"&gt;rootwait&lt;/span&gt; &lt;span class="n"&gt;smsc95xx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;turbo_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to tell the rest of the system on the Pi about the new partition.
Open up the fstab file on the Pi&amp;#8217;s root partition (&lt;code&gt;/tmp/pi_root/etc/fstab&lt;/code&gt;)
and change &lt;code&gt;/dev/mmcblk0p2&lt;/code&gt; to &lt;code&gt;/dev/mapper/sdcard&lt;/code&gt;. Now create a crypttab file
(&lt;code&gt;/tmp/pi_root/etc/crypttab&lt;/code&gt;) and add this line at the end. Note that those are
tab characters seprarating each word, not&amp;nbsp;spaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p2&lt;/span&gt;  &lt;span class="n"&gt;none&lt;/span&gt;    &lt;span class="n"&gt;luks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now unmount everything and put the &lt;span class="caps"&gt;SD&lt;/span&gt; card back in your&amp;nbsp;Pi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;umount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi_boot&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pi_root&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cryptsetup&lt;/span&gt; &lt;span class="n"&gt;luksClose&lt;/span&gt; &lt;span class="n"&gt;sdcard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;First&amp;nbsp;Boot&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The first boot will fail.&lt;/strong&gt; Have a &lt;span class="caps"&gt;USB&lt;/span&gt; keyboard and a screen hooked up to
your Pi so you can work with the Busybox recovery shell. All you have to do is
mount the root partition and then exit the shell, and everything else will take
care of itself. Run these commands when you get an &lt;code&gt;(initramfs)&lt;/code&gt; prompt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cryptsetup&lt;/span&gt; &lt;span class="n"&gt;luksOpen&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mmcblk0p2&lt;/span&gt; &lt;span class="n"&gt;sdcard&lt;/span&gt;
&lt;span class="n"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the Pi is booted up the rest of the way, you need to re-create the
initramfs so you get a nicer unlock prompt on future start&amp;nbsp;ups.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkinitramfs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now reboot. Instead of errors about not being able to find or mount the
root partition, you should get a nice prompt asking for your unlock password.
Enter it and press return, and the rest of the boot process should&amp;nbsp;follow.&lt;/p&gt;
&lt;h3&gt;Time&amp;nbsp;Problem&lt;/h3&gt;
&lt;p&gt;I found sometimes that mounting the decrypted root partition would fail because
the last unmount time was far in the future. This is because the Pi can&amp;#8217;t save
the time between reboots like most other computers. To work around this, you can
use the &lt;code&gt;date&lt;/code&gt; command to set the time in the initramfs, and then mount the system.
&lt;code&gt;date&lt;/code&gt; takes the current time in MMDDhhmmYYYY, so November 4, 2013 at 13:30
would be 110413302013. To get to a shell to set the time, intentionally
cause the unlock script to exit by entering an incorrect password three times.
You&amp;#8217;ll then have to wait about 30 seconds for a timeout, and then you&amp;#8217;ll be at
the &lt;code&gt;(initramfs)&lt;/code&gt; prompt. Set the time to something reasonably close (as long
as it&amp;#8217;s within a day, you&amp;#8217;re good) and then restart the unlocking&amp;nbsp;script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="mi"&gt;110413302013&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cryptroot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Remote&amp;nbsp;Unlocking&lt;/h2&gt;
&lt;p&gt;Having to be physically at the Pi to unlock the disk can be a pain, but there
is a way of unlocking it over &lt;span class="caps"&gt;SSH&lt;/span&gt;. The Dropbear &lt;span class="caps"&gt;SSH&lt;/span&gt; server is a very
small and lightweight server that can be run from the initramfs. It will
automatically add itself to the initramfs if it detects an encrypted partition
on the&amp;nbsp;system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;dropbear&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;#8217;s a minor bug in the initramfs scripts shipping with Dropbear in
Raspbian. On line 296 of
&lt;code&gt;/usr/share/initramfs-tools/scripts/local-top/cryptroot&lt;/code&gt;, add &lt;code&gt;/sbin/&lt;/code&gt;
just before &lt;code&gt;blkid&lt;/code&gt;. It should look like this&amp;nbsp;afterwards:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;FSTYPE&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(/sbin/blkid -s &lt;span class="caps"&gt;TYPE&lt;/span&gt; -o value &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;&lt;span class="caps"&gt;NEWROOT&lt;/span&gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to re-create the initramfs again to trigger Dropbear to generate &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkinitramfs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy over the &lt;span class="caps"&gt;SSH&lt;/span&gt; key Dropbear generates (this is from the Pi, to another&amp;nbsp;computer).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;scp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;othercomputer&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa_rpi_dropbear&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, edit initramfs&amp;#8217; authorized_keys file to have Dropbear show you the
password prompt as soon as you&amp;nbsp;connect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;nano&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;authorized_keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add this chunk of text just before the &lt;code&gt;ssh-rsa&lt;/code&gt; at the beginning of the file.
This starts the unlock script, and once it has exited it stops the other
instance of the unlock script so boot can&amp;nbsp;continue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/scripts/local-top/cryptroot &amp;amp;&amp;amp; kill -9 `ps | grep -m 1 &amp;#39;cryptroot&amp;#39; | cut -d &amp;#39; &amp;#39; -f 3`&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, rebuild initramfs for the last time (until you upgrade your&amp;nbsp;kernel).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkinitramfs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;initramfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test it out, restart your Pi, and then try logging in from another computer
(this step is from another computer that has network access to the&amp;nbsp;Pi).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa_rpi_dropbear&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;192.168.2.143&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should be asked to enter a password, and once a correct one has been
entered the Pi will boot the rest of the&amp;nbsp;way.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Write speed is greatly reduced, down to 4.2 &lt;span class="caps"&gt;MB&lt;/span&gt;/s from 12.9 &lt;span class="caps"&gt;MB&lt;/span&gt;/sec.
Writing a continued chunk of data to the &lt;span class="caps"&gt;SD&lt;/span&gt; card also pegs the &lt;span class="caps"&gt;CPU&lt;/span&gt; at 100%.
This results in a noticably slower startup and significant delays when
something is being written to disk. This might improve if &lt;span class="caps"&gt;AES&lt;/span&gt;-&lt;span class="caps"&gt;XTS&lt;/span&gt; support is
enabled in the Pi&amp;#8217;s kernel and cryptsetup is updated to use it, but I&amp;#8217;m not
confident the improvement will be that&amp;nbsp;substantial.&lt;/p&gt;</summary><category term="raspberrypi linux"></category></entry><entry><title>Letter Frequencies in Names of VirginiaÂ Cities</title><link href="http://paxswill.com/blog/2013/02/28/virginia-cities/" rel="alternate"></link><updated>2013-02-28T00:00:00-05:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2013-02-28:blog/2013/02/28/virginia-cities/</id><summary type="html">
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Recently I&amp;#8217;ve noticed on Facebook a couple of trivia posts asking you to try to name a city in Virgina with a certain letter in it. As background, thses posts are coming from my friends living in Virginia. You also have to be at least somewhat familiar with &lt;a href="https://en.wikipedia.org/wiki/Political_subdivisions_of_Virginia"&gt;Virginian municipal structure&lt;/a&gt;. Like other states, Virginia is divided up into counties. In most other states, the next step down is cities and/or towns. In Virginia, cities are independant and on the same level as counties. So the bar for being a city is pretty high, and many people can name a decent number of them if they put their mind to it. I wanted to find out if there were any letters not used in any cities. And because (like many programmers) I&amp;#8217;m lazy and didn&amp;#8217;t want to look through all of the cities manually I turned to Python to help&amp;nbsp;me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Start with some basic setup. &lt;code&gt;Counter&lt;/code&gt; is a counted set. &lt;code&gt;pprint&lt;/code&gt; provides a nicer way to print lists and other containers by adding line breaks and such. &lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; is a really easy to use &lt;span class="caps"&gt;HTML&lt;/span&gt; parser+navigator. &lt;a href="http://docs.python-requests.org/en/latest/"&gt;Requests&lt;/a&gt; makes it easy to download things from the&amp;nbsp;web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PrettyPrinter&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="c"&gt;# A prettier way to print&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrettyPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Wikipedia provides a nice &lt;a href="http://en.wikipedia.org/wiki/Cities_in_virginia"&gt;list&lt;/a&gt; of the cities in Virginia. I find all the tables (&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements) on the page, and the second one is the one I want. I then get a list of the text of all links (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements) in that&amp;nbsp;table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;city_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://en.wikipedia.org/wiki/Cities_in_virginia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;city_soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;city_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Python starts counting at 0 like many other programming languages&lt;/span&gt;
&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# There are some blank links, so drop those&lt;/span&gt;
&lt;span class="n"&gt;cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now run through the list of cities, and add each one to a &lt;code&gt;Counter&lt;/code&gt;. Then I print out how many cities there are and a list of the letters used, sorted by how often they were&amp;nbsp;used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;city_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Add each letter of the lowercase city name to the Counter&lt;/span&gt;
    &lt;span class="n"&gt;city_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{} cities&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
39 cities
[(&amp;apos;a&amp;apos;, 35),
 (&amp;apos;r&amp;apos;, 31),
 (&amp;apos;o&amp;apos;, 30),
 (&amp;apos;n&amp;apos;, 29),
 (&amp;apos;e&amp;apos;, 27),
 (&amp;apos;s&amp;apos;, 25),
 (&amp;apos;l&amp;apos;, 24),
 (&amp;apos;i&amp;apos;, 23),
 (&amp;apos;t&amp;apos;, 17),
 (&amp;apos;h&amp;apos;, 14),
 (&amp;apos;u&amp;apos;, 11),
 (&amp;apos;c&amp;apos;, 11),
 (&amp;apos;b&amp;apos;, 10),
 (&amp;apos;f&amp;apos;, 10),
 (&amp;apos;g&amp;apos;, 10),
 (&amp;apos;p&amp;apos;, 9),
 (&amp;apos;m&amp;apos;, 9),
 (&amp;apos;d&amp;apos;, 8),
 (&amp;apos;k&amp;apos;, 7),
 (&amp;apos;v&amp;apos;, 6),
 (&amp;apos;w&amp;apos;, 6),
 (&amp;apos; &amp;apos;, 6),
 (&amp;apos;x&amp;apos;, 4),
 (&amp;apos;y&amp;apos;, 2),
 (&amp;apos;q&amp;apos;, 1)]

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I guess space (&amp;#8216; &amp;#8216;) counts as a letter, for those cities that are two words. Now I want to see which letters aren&amp;#8217;t used . To do this I make a set of the letters that were found and subtract it from a set of all lowercase&amp;nbsp;characters.&lt;/p&gt;
&lt;p&gt;Sidenote: Confused from earlier where I said that &lt;code&gt;Counter&lt;/code&gt; was a counted set? Well, it is but it isn&amp;#8217;t a &lt;em&gt;set&lt;/em&gt; so the set operators won&amp;#8217;t work on&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;not_in_cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_in_cities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
{&amp;apos;z&amp;apos;, &amp;apos;j&amp;apos;}

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Bet you can&amp;#8217;t name a city that contains the letter&amp;nbsp;&amp;#8216;J&amp;#8217;!&lt;/p&gt;
&lt;p&gt;And because they&amp;#8217;re pretty big, let&amp;#8217;s look at incorporated towns. Again, Wikipedia has a &lt;a href="http://en.wikipedia.org/wiki/List_of_towns_in_Virginia"&gt;list&lt;/a&gt; of them that I&amp;#8217;ll use. This list isn&amp;#8217;t in a table, so it&amp;#8217;s a bit harder to pull&amp;nbsp;out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;town_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://en.wikipedia.org/wiki/List_of_towns_in_Virginia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;town_soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;First I grab the main content area. Wikipedia displays the actual town names as elements (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements) within unordered lists (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements), one for each letter in the alphabet. Because there are some other unordered lists in the content, I find all unordered lists that are only one level down (this is starting to get into the specifics of &lt;span class="caps"&gt;HTML&lt;/span&gt;, but it&amp;#8217;ll be over soon). Then I go through each list, and save the link text for the first link I find in each list item. After than, the process is the same as the&amp;nbsp;cities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;town_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;town_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mw-content-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;town_content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;town_content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;towns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ul&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;town_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="c"&gt;# The references list has rel=&amp;quot;nofollow&amp;quot;, and we don&amp;#39;t want the references&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rel&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;town_link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;towns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town_link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;town&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;towns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;town_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{} towns&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;towns&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
190 towns
[(&amp;apos;e&amp;apos;, 310),
 (&amp;apos;a&amp;apos;, 278),
 (&amp;apos;l&amp;apos;, 272),
 (&amp;apos;n&amp;apos;, 258),
 (&amp;apos;o&amp;apos;, 248),
 (&amp;apos;r&amp;apos;, 232),
 (&amp;apos;i&amp;apos;, 216),
 (&amp;apos;t&amp;apos;, 200),
 (&amp;apos;s&amp;apos;, 174),
 (&amp;apos;c&amp;apos;, 154),
 (&amp;apos;h&amp;apos;, 102),
 (&amp;apos;d&amp;apos;, 100),
 (&amp;apos;u&amp;apos;, 94),
 (&amp;apos;b&amp;apos;, 88),
 (&amp;apos; &amp;apos;, 82),
 (&amp;apos;g&amp;apos;, 82),
 (&amp;apos;m&amp;apos;, 70),
 (&amp;apos;p&amp;apos;, 66),
 (&amp;apos;w&amp;apos;, 66),
 (&amp;apos;v&amp;apos;, 64),
 (&amp;apos;y&amp;apos;, 64),
 (&amp;apos;k&amp;apos;, 60),
 (&amp;apos;f&amp;apos;, 38),
 (&amp;apos;x&amp;apos;, 16),
 (&amp;apos;j&amp;apos;, 6),
 (&amp;apos;.&amp;apos;, 4),
 (&amp;apos;q&amp;apos;, 4),
 (&amp;apos;z&amp;apos;, 2)]

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;not_in_towns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not_in_towns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
set()

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;code&gt;set()&lt;/code&gt; means that every letter is used (the &amp;#8216;.&amp;#8217;s are from St. Charles and St. Paul). Now I want to see what the counts are for the cities and towns combined. I create a new &lt;code&gt;Counter&lt;/code&gt; from the cities` and then add the&amp;nbsp;towns&amp;#8217;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell vbox"&gt;
&lt;div class="input hbox"&gt;


&lt;div class="input_area box-flex1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;city_town_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;city_town_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;town_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;city_town_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class="vbox output_wrapper"&gt;
&lt;div class="output vbox"&gt;


&lt;div class="hbox output_area"&gt;&lt;div class="prompt"&gt;&lt;/div&gt;
&lt;div class="box-flex1 output_subarea output_stream output_stdout"&gt;
&lt;pre&gt;
[(&amp;apos;e&amp;apos;, 337),
 (&amp;apos;a&amp;apos;, 313),
 (&amp;apos;l&amp;apos;, 296),
 (&amp;apos;n&amp;apos;, 287),
 (&amp;apos;o&amp;apos;, 278),
 (&amp;apos;r&amp;apos;, 263),
 (&amp;apos;i&amp;apos;, 239),
 (&amp;apos;t&amp;apos;, 217),
 (&amp;apos;s&amp;apos;, 199),
 (&amp;apos;c&amp;apos;, 165),
 (&amp;apos;h&amp;apos;, 116),
 (&amp;apos;d&amp;apos;, 108),
 (&amp;apos;u&amp;apos;, 105),
 (&amp;apos;b&amp;apos;, 98),
 (&amp;apos;g&amp;apos;, 92),
 (&amp;apos; &amp;apos;, 88),
 (&amp;apos;m&amp;apos;, 79),
 (&amp;apos;p&amp;apos;, 75),
 (&amp;apos;w&amp;apos;, 72),
 (&amp;apos;v&amp;apos;, 70),
 (&amp;apos;k&amp;apos;, 67),
 (&amp;apos;y&amp;apos;, 66),
 (&amp;apos;f&amp;apos;, 48),
 (&amp;apos;x&amp;apos;, 20),
 (&amp;apos;j&amp;apos;, 6),
 (&amp;apos;q&amp;apos;, 5),
 (&amp;apos;.&amp;apos;, 4),
 (&amp;apos;z&amp;apos;, 2)]

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Autotools Trick:Â config.site</title><link href="http://paxswill.com/blog/2012/02/07/autotool-trick-config-dot-site/" rel="alternate"></link><updated>2012-02-07T16:01:00-05:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2012-02-07:blog/2012/02/07/autotool-trick-config-dot-site/</id><summary type="html">&lt;p&gt;This is a quick trick for those who have to continually set up common settings
when using Autotools style &lt;code&gt;configure&lt;/code&gt; scripts. One of the initial steps a
configure script does is to look for a &lt;code&gt;$prefix/share/config.site&lt;/code&gt;
file and then to execute its contents. An example of how this may be useful is
if you have some common libraries that are not on the default search paths for
your compiler and you want &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; set automatically. In my case
I commonly use the Nvidia OpenCL headers, which on the machines I use are
installed to &lt;code&gt;/usr/local/cuda/include&lt;/code&gt;. To use them, I could have a config.log
file like so in my default installation&amp;nbsp;prefix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;CPPFLAGS&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${&lt;span class="caps"&gt;CPPFLAGS&lt;/span&gt;} -I/usr/local/cuda/include&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now when I run &lt;code&gt;configure&lt;/code&gt;, it picks up that additional flag for the C&amp;nbsp;preprocessor.&lt;/p&gt;
&lt;p&gt;A more complicated example is if you maintain a seperate prefix. I do this in
my home folder for my &lt;span class="caps"&gt;CS&lt;/span&gt; department account. Because my home folder is shared
over &lt;span class="caps"&gt;NFS&lt;/span&gt; to all of the department&amp;#8217;s machines, and many of them have different
architectures and operating environments, I keep a prefix for different classes
of machines. For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sparc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s1070&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;nv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c870&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; directory is just a repository for all of the source packages that I 
end up installing in the other directories. In my &lt;code&gt;.bashrc&lt;/code&gt; I export a
variable, &lt;code&gt;LOCAL_PREFIX&lt;/code&gt;, that is set to the prefix for the machine I&amp;#8217;m logging
into. Then, all I need to do is &lt;code&gt;./configure --prefix=$LOCAL_PREFIX&lt;/code&gt; and the
compiler flags are properly set for that prefix. Another possibility is to
export the &lt;code&gt;CONFIG_SITE&lt;/code&gt; variable set to the path to the config.site file for
that machine&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;More details about config.site can be found in the &lt;a href="http://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.68/html_node/Site-Defaults.html#Site-Defaults"&gt;Autoconf manual&lt;/a&gt;.&lt;/p&gt;</summary><category term="autoconf"></category><category term="code"></category></entry><entry><title>NSStringÂ Cons</title><link href="http://paxswill.com/blog/2011/08/14/nsstring-cons/" rel="alternate"></link><updated>2011-08-14T06:54:00-04:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2011-08-14:blog/2011/08/14/nsstring-cons/</id><summary type="html">&lt;p&gt;One of the fundamental operators in functional languages is &amp;#8216;cons&amp;#8217;. It
concatenates lists of things together, and since strings are usually treated as
lists of characters, cons gets a lot of use in string processing as well. One
of the cool tricks I saw done with Objective-C a while ago was implementing
cons on NSString, using &lt;code&gt;:&lt;/code&gt; like Haskell and &lt;span class="caps"&gt;ML&lt;/span&gt; do. I have been unable to find
the original site, so I decided to reimplement it myself&amp;nbsp;recently.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;A quick caveat to the following: this uses Objective-C trickery that may not be
very safe in a production environment. Also, the upcoming Automatic Reference
Counting in Clang/&lt;span class="caps"&gt;LLVM&lt;/span&gt; 3.0 will not compile this code. With that out of the
way, lets look at how we&amp;#8217;re going to do this. In Objective-C, methods are
backed by a concrete implementation in the form of a standard C function. The
runtime uses the &lt;a href="http://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/doc/uid/TP40001418-CH3g-BAJFGBJF"&gt;&lt;code&gt;IMP&lt;/code&gt;&lt;/a&gt; type for this, which is defined&amp;nbsp;as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;&lt;span class="caps"&gt;IMP&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;SEL&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;...&lt;/code&gt; in this case stands for additional arguments for the method. For
example, &lt;code&gt;[@"foo" stringByAppendingString:@"bar"]&lt;/code&gt; will eventually be executed
by a function matching the prototype&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;SEL&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;otherString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additional arguments are just tacked onto the end. This can be combined with
standard C varargs. The only caveat is we need to signal the end of the varargs
somehow. I used &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="nf"&gt;stringCons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;&lt;span class="caps"&gt;SEL&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...){&lt;/span&gt;
    &lt;span class="kt"&gt;va_list&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NSMutableString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fullString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSMutableString&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;initWithString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;va_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;currentString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// End on nil&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;currentString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;va_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))){&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fullString&lt;/span&gt; &lt;span class="n"&gt;appendString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;currentString&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;va_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fullString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two approaches to adding a method to a class at runtime in
Objective-C. The  normal way is to use
&lt;a href="http://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/class_addMethod"&gt;&lt;code&gt;class_addMethod&lt;/code&gt;&lt;/a&gt;. This is enough in most cases, but because
we have a variable length selector, we can&amp;#8217;t use this method. Another way
methods can be added is with the dynamic method resolution available through
NSObject (Mike Ash touches on this method in a post on
&lt;a href="http://mikeash.com/pyblog/friday-qa-2009-03-27-objective-c-message-forwarding.html"&gt;message forwarding&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;&lt;span class="caps"&gt;BOOL&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;resolveInstanceMethod:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;&lt;span class="caps"&gt;SEL&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Check that the selector is just &amp;#39;:&amp;#39; characters&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;checkName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sel_getName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;&lt;span class="caps"&gt;BOOL&lt;/span&gt;&lt;/span&gt; &lt;span class="n"&gt;isCons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;&lt;span class="caps"&gt;YES&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;isCons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;&lt;span class="caps"&gt;NO&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Add the method, or pass this message up the chain&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isCons&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// Make the type string&lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;typesSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;typesSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;typesSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;typesSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Add the method&lt;/span&gt;
        &lt;span class="n"&gt;class_addMethod&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stringCons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;&lt;span class="caps"&gt;YES&lt;/span&gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="n"&gt;resolveInstanceMethod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here all were doing is checking to see if the selector is completely made up
of &amp;#8216;:&amp;#8217; characters. If it is, we add the &lt;code&gt;stringCons&lt;/code&gt; &lt;span class="caps"&gt;IMP&lt;/span&gt; from above for that
selector. Note the else block at the end. The call to
&lt;code&gt;[super resolveInstanceMethod:sel]&lt;/code&gt; is very important, as other parts of a
class may depend on this dynamic method&amp;nbsp;resolution.&lt;/p&gt;
&lt;p&gt;The final hurdle is how to add &lt;code&gt;+resolveInstanceMethod:&lt;/code&gt; to NSString. The
safest way would be to subclass NSString, but since NSString is a class cluster
this is not possible. I ended up using a category, but a safer choice might be
to use method swizzling to insert our method in addition to any NSString may
have&amp;nbsp;defined.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it to adding a cons-like operator to NSString in Objective-C. To use it,
just insert it between instances of NSString ending with &lt;code&gt;nil&lt;/code&gt;, like&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="code"></category></entry><entry><title>cWavelet</title><link href="http://paxswill.com/blog/2011/03/28/cwavelet-weekend/" rel="alternate"></link><updated>2011-03-28T00:00:00-04:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2011-03-28:blog/2011/03/28/cwavelet-weekend/</id><summary type="html">&lt;p&gt;Weekend project I made: &lt;a href="https://github.com/paxswill/cwavelet"&gt;cWavelet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a simple wavelet library written in pure C. I&amp;#8217;ve been trying to wrap
 my head around wavelets off and on for about three months, and I finally 
got them enough to write a library. It is still being developed, but it does
 simple forward transforms (as far as I can tell correctly) right now. In the 
future, I hope to implement portions of it in OpenCL and/or &lt;span class="caps"&gt;MPI&lt;/span&gt; so I can
 try it out on the clusters at&amp;nbsp;school.&lt;/p&gt;</summary><category term="code"></category></entry><entry><title>Ubuntu 10.04 on a Dell MiniÂ 9</title><link href="http://paxswill.com/blog/2010/05/01/ubuntu-1004-dell-mini-9/" rel="alternate"></link><updated>2010-05-01T00:00:00-04:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2010-05-01:blog/2010/05/01/ubuntu-1004-dell-mini-9/</id><summary type="html">&lt;p&gt;The Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X install on my Mini 9 was recently borked (friend was borrowing it,
and an unclean shutdown corrupted the file system), and I didn&amp;#8217;t have the
install discs on me. I&amp;#8217;d also been messing with the Lucid Lynx beta in a &lt;span class="caps"&gt;VM&lt;/span&gt; on
my machine, and was very impressed with the level of polish, so I decided to
install Ubuntu on the Mini again and see how it went.
&lt;!--more--&gt;
This was a couple days before the release date, so I downloaded the release
candidate and ran from there. I&amp;#8217;ve used both the normal desktop and netbook
remix in previous versions of Ubuntu, and for my workflow I prefer using the 
normal desktop. As there isn&amp;#8217;t a desktop .img available, I downloaded the
desktop &lt;span class="caps"&gt;ISO&lt;/span&gt; and used the &lt;span class="caps"&gt;USB&lt;/span&gt; IMage Writer in my &lt;span class="caps"&gt;VM&lt;/span&gt; to copy the &lt;span class="caps"&gt;ISO&lt;/span&gt; to a flash
drive. Installation had a minor hitch in that the first install didn&amp;#8217;t seem to 
take, in that after the installer was finished and the system rebooted, nothing
showed up. I booted to the &lt;span class="caps"&gt;USB&lt;/span&gt; stick again, reinstalled, and everything worked 
after&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Hardware support is very much improved in this version (I&amp;#8217;ve previously used
8.04 and 9.04). I didn&amp;#8217;t have to make any configuration changes to use sound
hardware, Bluetooth 
worked right away, 3D acceleration was a given as I have an Intel &lt;span class="caps"&gt;GPU&lt;/span&gt;, and
after I installed the Broadcom &lt;span class="caps"&gt;STA&lt;/span&gt; driver through the restricted driver 
installer, Wifi worked as well. Sleep works as well as it did under 9.10, as
having an &lt;span class="caps"&gt;SD&lt;/span&gt; card mounted when you try sleeping causes the suspend process to
hang. The fix is detailed in &lt;a href="http://www.mydellmini.com/forum/ubuntu-netbook-remix/14722-suspend-hibernate-mini-9-broken-3.html#post143677"&gt;this&lt;/a&gt; MyDellMini forum post. Reproduced
here, the fix is to add a hook to the sleep process that unmounts all memory
cards. Put the following script in the &lt;code&gt;/etc/pm/sleep.d/&lt;/code&gt; directory.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; in
hibernate|suspend&lt;span class="o"&gt;)&lt;/span&gt;
umount /dev/mmcblk*
    ;;
&lt;span class="c"&gt;#    thaw|resume)&lt;/span&gt;
&lt;span class="c"&gt;#        ;;&lt;/span&gt;
*&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;
    ;;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then make it&amp;nbsp;executable.&lt;/p&gt;
&lt;p&gt;Addendum: Turned out it wasn&amp;#8217;t a bout of file system madness, it was the &lt;span class="caps"&gt;SSD&lt;/span&gt; dying.
 I sent it into Dell and got it back a week and a half&amp;nbsp;later.&lt;/p&gt;</summary><category term="linux"></category><category term="code"></category></entry><entry><title>Thoughts on My Education (SoÂ Far)</title><link href="http://paxswill.com/blog/2008/12/10/thoughts-on-cs-education/" rel="alternate"></link><updated>2008-12-10T00:00:00-05:00</updated><author><name>Will Ross</name></author><id>tag:paxswill.com,2008-12-10:blog/2008/12/10/thoughts-on-cs-education/</id><summary type="html">&lt;p&gt;I was reading &lt;a href="http://itmanagement.earthweb.com/features/print.php/12297_3789981_1"&gt;this&lt;/a&gt; article
 a bit ago. In it Bjarne Stroustrup talks about the inadequacies of American
&lt;span class="caps"&gt;CS&lt;/span&gt; education. One point he brings up resonated with me. 
&lt;!--more--&gt;
I took &lt;span class="caps"&gt;AP&lt;/span&gt; Computer Science A and &lt;span class="caps"&gt;AB&lt;/span&gt; (in Java) in high school, and something we
learned  early on was how to make our code look nice. Ideally, we didnât put
comments on the same line as code, and in &lt;span class="caps"&gt;AB&lt;/span&gt;, we had to document each method
with preconditions, post conditions, and a general description of the method.
While occasionally (and especially on the final project), the better practices
fell to the wayside, we wrote nice code. Right now, Iâm finishing up my first
semester of college (intending to major in Computer Engineering), and noticed
a jump between how I was taught &lt;span class="caps"&gt;CS&lt;/span&gt; in high school and how &lt;span class="caps"&gt;CS&lt;/span&gt; is taught in
higher education. I took a &lt;span class="caps"&gt;CS&lt;/span&gt; course that was taught in C++, but we never
talked about code style. We were referred to the textbook, which had a couple
pages on it, but these were mostly what to comment. There was none of the
things I was taught in Java, about you keep class data private, and segment
everything into easily reusable parts. We were taught to just bang out code.
One of my friends at another school was learning Java for the first time, and
he had to write a class that held temperature data. He didnât know what
getters and setters were, and why you keep data private. The main class and the
utility class were so interwoven, it would be near impossible to separate&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;While most of us who took &lt;span class="caps"&gt;CS&lt;/span&gt; in my high school disliked how our teacher taught
us, I now see why she went through all the little steps. People in my C++ class
didnât know why we used ints or longs, and what overflow is. All of us in &lt;span class="caps"&gt;AP&lt;/span&gt; &lt;span class="caps"&gt;CS&lt;/span&gt;
could count in binary, and change bases at will. We didnât learn about bitwise 
operations in high school, but when I read about them now, I know why you can
divide by two with a bitshift. Thanks Mrs.&amp;nbsp;C.&lt;/p&gt;</summary></entry></feed>